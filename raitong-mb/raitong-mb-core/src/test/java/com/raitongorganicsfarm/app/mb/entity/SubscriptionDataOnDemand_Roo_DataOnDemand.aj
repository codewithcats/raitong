// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.raitongorganicsfarm.app.mb.entity;

import com.raitongorganicsfarm.app.mb.entity.Subscription;
import com.raitongorganicsfarm.app.mb.entity.SubscriptionDataOnDemand;
import com.raitongorganicsfarm.app.mb.repository.SubscriptionRepository;
import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect SubscriptionDataOnDemand_Roo_DataOnDemand {
    
    declare @type: SubscriptionDataOnDemand: @Component;
    
    private Random SubscriptionDataOnDemand.rnd = new SecureRandom();
    
    private List<Subscription> SubscriptionDataOnDemand.data;
    
    @Autowired
    SubscriptionRepository SubscriptionDataOnDemand.subscriptionRepository;
    
    public Subscription SubscriptionDataOnDemand.getNewTransientSubscription(int index) {
        Subscription obj = new Subscription();
        setDeliveryFee(obj, index);
        setDoesNotEat(obj, index);
        setExpectedRevenue(obj, index);
        setMonths(obj, index);
        setNote(obj, index);
        setPaidDate(obj, index);
        setStartingDate(obj, index);
        return obj;
    }
    
    public void SubscriptionDataOnDemand.setDeliveryFee(Subscription obj, int index) {
        BigDecimal deliveryFee = BigDecimal.valueOf(index);
        obj.setDeliveryFee(deliveryFee);
    }
    
    public void SubscriptionDataOnDemand.setDoesNotEat(Subscription obj, int index) {
        String doesNotEat = "doesNotEat_" + index;
        obj.setDoesNotEat(doesNotEat);
    }
    
    public void SubscriptionDataOnDemand.setExpectedRevenue(Subscription obj, int index) {
        BigDecimal expectedRevenue = BigDecimal.valueOf(index);
        obj.setExpectedRevenue(expectedRevenue);
    }
    
    public void SubscriptionDataOnDemand.setMonths(Subscription obj, int index) {
        int months = index;
        obj.setMonths(months);
    }
    
    public void SubscriptionDataOnDemand.setNote(Subscription obj, int index) {
        String note = "note_" + index;
        obj.setNote(note);
    }
    
    public void SubscriptionDataOnDemand.setPaidDate(Subscription obj, int index) {
        Date paidDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setPaidDate(paidDate);
    }
    
    public void SubscriptionDataOnDemand.setStartingDate(Subscription obj, int index) {
        Date startingDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setStartingDate(startingDate);
    }
    
    public Subscription SubscriptionDataOnDemand.getSpecificSubscription(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Subscription obj = data.get(index);
        String id = obj.getId();
        return subscriptionRepository.findOne(id);
    }
    
    public Subscription SubscriptionDataOnDemand.getRandomSubscription() {
        init();
        Subscription obj = data.get(rnd.nextInt(data.size()));
        String id = obj.getId();
        return subscriptionRepository.findOne(id);
    }
    
    public boolean SubscriptionDataOnDemand.modifySubscription(Subscription obj) {
        return false;
    }
    
    public void SubscriptionDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = subscriptionRepository.findAll(new org.springframework.data.domain.PageRequest(from / to, to)).getContent();
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Subscription' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Subscription>();
        for (int i = 0; i < 10; i++) {
            Subscription obj = getNewTransientSubscription(i);
            try {
                subscriptionRepository.save(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            data.add(obj);
        }
    }
    
}
