// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.raitongorganicsfarm.app.mb.entity;

import com.raitongorganicsfarm.app.mb.entity.SubscriptionDataOnDemand;
import com.raitongorganicsfarm.app.mb.entity.SubscriptionIntegrationTest;
import com.raitongorganicsfarm.app.mb.repository.SubscriptionRepository;
import java.util.List;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

privileged aspect SubscriptionIntegrationTest_Roo_IntegrationTest {
    
    declare @type: SubscriptionIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: SubscriptionIntegrationTest: @ContextConfiguration(locations = "classpath:/META-INF/spring/applicationContext*.xml");
    
    @Autowired
    private SubscriptionDataOnDemand SubscriptionIntegrationTest.dod;
    
    @Autowired
    SubscriptionRepository SubscriptionIntegrationTest.subscriptionRepository;
    
    @Test
    public void SubscriptionIntegrationTest.testCount() {
        Assert.assertNotNull("Data on demand for 'Subscription' failed to initialize correctly", dod.getRandomSubscription());
        long count = subscriptionRepository.count();
        Assert.assertTrue("Counter for 'Subscription' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void SubscriptionIntegrationTest.testFind() {
        Subscription obj = dod.getRandomSubscription();
        Assert.assertNotNull("Data on demand for 'Subscription' failed to initialize correctly", obj);
        String id = obj.getId();
        Assert.assertNotNull("Data on demand for 'Subscription' failed to provide an identifier", id);
        obj = subscriptionRepository.findOne(id);
        Assert.assertNotNull("Find method for 'Subscription' illegally returned null for id '" + id + "'", obj);
        Assert.assertEquals("Find method for 'Subscription' returned the incorrect identifier", id, obj.getId());
    }
    
    @Test
    public void SubscriptionIntegrationTest.testFindAll() {
        Assert.assertNotNull("Data on demand for 'Subscription' failed to initialize correctly", dod.getRandomSubscription());
        long count = subscriptionRepository.count();
        Assert.assertTrue("Too expensive to perform a find all test for 'Subscription', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        List<Subscription> result = subscriptionRepository.findAll();
        Assert.assertNotNull("Find all method for 'Subscription' illegally returned null", result);
        Assert.assertTrue("Find all method for 'Subscription' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void SubscriptionIntegrationTest.testFindEntries() {
        Assert.assertNotNull("Data on demand for 'Subscription' failed to initialize correctly", dod.getRandomSubscription());
        long count = subscriptionRepository.count();
        if (count > 20) count = 20;
        int firstResult = 0;
        int maxResults = (int) count;
        List<Subscription> result = subscriptionRepository.findAll(new org.springframework.data.domain.PageRequest(firstResult / maxResults, maxResults)).getContent();
        Assert.assertNotNull("Find entries method for 'Subscription' illegally returned null", result);
        Assert.assertEquals("Find entries method for 'Subscription' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void SubscriptionIntegrationTest.testSave() {
        Assert.assertNotNull("Data on demand for 'Subscription' failed to initialize correctly", dod.getRandomSubscription());
        Subscription obj = dod.getNewTransientSubscription(Integer.MAX_VALUE);
        Assert.assertNotNull("Data on demand for 'Subscription' failed to provide a new transient entity", obj);
        Assert.assertNull("Expected 'Subscription' identifier to be null", obj.getId());
        subscriptionRepository.save(obj);
        Assert.assertNotNull("Expected 'Subscription' identifier to no longer be null", obj.getId());
    }
    
    @Test
    public void SubscriptionIntegrationTest.testDelete() {
        Subscription obj = dod.getRandomSubscription();
        Assert.assertNotNull("Data on demand for 'Subscription' failed to initialize correctly", obj);
        String id = obj.getId();
        Assert.assertNotNull("Data on demand for 'Subscription' failed to provide an identifier", id);
        obj = subscriptionRepository.findOne(id);
        subscriptionRepository.delete(obj);
        Assert.assertNull("Failed to remove 'Subscription' with identifier '" + id + "'", subscriptionRepository.findOne(id));
    }
    
}
